{"version":3,"sources":["components/Header/index.js","components/ListItem/index.js","components/Home/index.js","components/NotFound/index.js","components/Login/index.js","components/Register/index.js","components/LoginRegister/index.js","components/AuthenticatedRoute/index.js","App.js","reportWebVitals.js","index.js"],"names":["withRouter","props","className","to","type","onClick","history","Cookies","remove","replace","ListItem","state","title","body","onSubmitUpdateForm","event","preventDefault","eachEntry","updateEntriesList","id","userId","onChangeBody","setState","target","value","onChangeTitle","updateEntryForm","onSubmit","htmlFor","onChange","this","trigger","modal","close","color","size","Component","apiConstants","Home","apiStatus","selectedFile","uploadResponse","isUploadedSuccessfully","entriesList","newEntryId","newEntryUserId","newTitle","newBody","getEntriesData","a","jwtToken","get","options","method","headers","authorization","fetch","entriesListResponse","ok","json","entriesListJson","JSON","parse","entriesData","onSubmitAddNewEntryForm","newEntry","newEntriesList","alert","onChangeEntryId","onChangeUserId","selectFileToBeUploaded","files","uploadSelectedFile","Accept","uploadFileResponse","uploadFileResponseData","msg","selectAndUploadFileToServer","name","accept","addNewEntryForm","updatedEntriesList","currentEntry","find","eachItem","indexOfEntry","findIndex","splice","renderEntriesList","map","Login","username","password","loginResponseMessage","showLoginErrorMessage","isMember","renderLoader","height","width","onLoginFailure","errorMessage","onSuccessFullLogin","set","expires","path","onSubmitLoginForm","userDetails","stringify","loginResponse","loginResponseJson","message","onChangeUsername","onChangePassword","renderLoginForm","Register","registrationResponseMessage","registrationApiStatus","onSubmitRegistrationForm","registerResponse","registerResponseJson","loginAfterRegistration","setStateToInitial","renderRegistrationSuccessContainer","renderRegistrationFailureContainer","renderRegistrationResponse","userStatusConstants","LoginRegister","onClickDisplayLoginForm","onClickDisplayRegisterForm","renderLoginRegisterButtons","renderLoginRegisterPage","undefined","AuthenticatedRoute","App","exact","component","NotFound","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kfAsBeA,eAjBA,SAACC,GAOd,OACE,sBAAKC,UAAU,sBAAf,UACE,cAAC,IAAD,CAAMC,GAAG,IAAT,kBACA,wBAAQD,UAAU,gBAAgBE,KAAK,SAASC,QAT7B,WACrB,IAAQC,EAAYL,EAAZK,QACRC,IAAQC,OAAO,aACfF,EAAQG,QAAQ,MAMd,0BCRAC,G,kNACJC,MAAQ,CACNC,MAAO,GACPC,KAAM,I,EAGRC,mBAAqB,SAACC,GACpBA,EAAMC,iBACN,MAAyC,EAAKf,MAAtCgB,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,kBACnB,EAAwB,EAAKP,MAArBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAOfK,EANqB,CACnBC,GAAIF,EAAUE,GACdC,OAAQH,EAAUG,OAClBR,MAAOA,EACPC,KAAMA,K,EAKVQ,aAAe,SAACN,GACd,EAAKO,SAAS,CAAET,KAAME,EAAMQ,OAAOC,S,EAGrCC,cAAgB,SAACV,GACf,EAAKO,SAAS,CAAEV,MAAOG,EAAMQ,OAAOC,S,EAGtCE,gBAAkB,WAChB,OACE,uBAAMxB,UAAU,oBAAoByB,SAAU,EAAKb,mBAAnD,UACE,uBAAOZ,UAAU,0BAA0B0B,QAAQ,cAAnD,mBAGA,uBACE1B,UAAU,0BACViB,GAAG,cACHU,SAAU,EAAKJ,gBAEjB,uBAAOvB,UAAU,0BAA0B0B,QAAQ,aAAnD,kBAGA,uBACE1B,UAAU,0BACViB,GAAG,aACHU,SAAU,EAAKR,eAEjB,wBAAQnB,UAAU,kCAAkCE,KAAK,SAAzD,8B,4CAON,WAAU,IAAD,OACDa,EAAYa,KAAK7B,MACvB,OACE,+BACE,sBAAKC,UAAU,2BAAf,UACE,oBAAIA,UAAU,mBAAd,SAAkCe,EAAUA,UAAUL,QACtD,cAAC,IAAD,CACEV,UAAU,gBACV6B,QACE,wBAAQ7B,UAAU,6BAAlB,oBAEF8B,OAAK,EALP,SAOG,SAACC,GAAD,OACC,sBAAK/B,UAAU,0BAAf,UACE,wBACEA,UAAU,qBACVE,KAAK,SACLC,QAAS4B,EAHX,SAKE,cAAC,IAAD,CAASC,MAAM,UAAUC,KAAK,WAE/B,EAAKT,2BAKd,mBAAGxB,UAAU,kBAAb,SAAgCe,EAAUA,UAAUJ,OACpD,oBAAIX,UAAU,8B,GAjFCkC,cAuFR1B,IClFT2B,G,MACK,WADLA,EAEK,UAFLA,EAGK,UAHLA,EAIQ,cAGRC,E,4MACJ3B,MAAQ,CACN4B,UAAWF,EACXG,aAAc,KACdC,eAAgB,GAChBC,wBAAwB,EACxBC,YAAa,GACbC,WAAY,GACZC,eAAgB,GAChBC,SAAU,GACVC,QAAS,I,EAGXC,e,sBAAiB,kCAAAC,EAAA,6DACf,EAAK3B,SAAS,CAAEiB,UAAWF,IACrBa,EAAW3C,IAAQ4C,IAAI,aACd,4DACTC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,cAAc,UAAD,OAAYL,GACzB,eAAgB,uBARL,SAWmBM,MARnB,4DAQiCJ,GAXjC,YAWTK,EAXS,QAYSC,GAZT,kCAaiBD,EAAoBE,OAbrC,QAaPC,EAbO,OAcb,EAAKtC,SAAS,CACZqB,YAAakB,KAAKC,MAAMF,EAAgBG,aACxCxB,UAAWF,IAhBA,wBAmBb,EAAKf,SAAS,CAAEiB,UAAWF,IAnBd,4C,EAuBjB2B,wBAA0B,SAACjD,GACzBA,EAAMC,iBACN,MAMI,EAAKL,MALPgC,EADF,EACEA,YACAC,EAFF,EAEEA,WACAC,EAHF,EAGEA,eACAC,EAJF,EAIEA,SAGImB,EAAW,CACf9C,GAAIyB,EACJxB,OAAQyB,EACRjC,MAAOkC,EACPjC,KAXF,EAKEkC,SAQImB,EAAc,sBAAOvB,GAAP,CAAoBsB,IACxC,EAAK3C,SAAS,CAAEqB,YAAauB,IAC7BC,MAAM,4BAAD,OAA6BrB,EAA7B,2B,EAGPsB,gBAAkB,SAACrD,GACjB,EAAKO,SAAS,CAAEsB,WAAY7B,EAAMQ,OAAOC,S,EAG3C6C,eAAiB,SAACtD,GAChB,EAAKO,SAAS,CAAEuB,eAAgB9B,EAAMQ,OAAOC,S,EAG/CH,aAAe,SAACN,GACd,EAAKO,SAAS,CAAEyB,QAAShC,EAAMQ,OAAOC,S,EAGxCC,cAAgB,SAACV,GACf,EAAKO,SAAS,CAAEwB,SAAU/B,EAAMQ,OAAOC,S,EAGzC8C,uBAAyB,SAACvD,GACxB,EAAKO,SAAS,CAAEkB,aAAczB,EAAMQ,OAAOgD,MAAM,M,EAGnDC,mB,uCAAqB,WAAOzD,GAAP,uBAAAkC,EAAA,6DACXT,EAAiB,EAAK7B,MAAtB6B,aACFU,EAAW3C,IAAQ4C,IAAI,aACX,wDACZC,EAAU,CACdC,OAAQ,OACRC,QAAS,CACPC,cAAc,UAAD,OAAYL,GACzB,eAAgB,mBAChBuB,OAAQ,oBAEV5D,KAAM2B,GAXW,SAacgB,MAVf,wDAUgCJ,GAb/B,cAabsB,EAba,gBAckBA,EAAmBf,OAdrC,OAcbgB,EAda,OAenB,EAAKrD,SAAS,CACZmB,eAAgBkC,EAAuBC,IACvClC,wBAAwB,IAjBP,4C,wDAqBrBmC,4BAA8B,WAC5B,OACE,gCACE,uBACEzE,KAAK,OACL0E,KAAK,aACLC,OAAO,mBACPlD,SAAU,EAAKyC,yBAEjB,wBAAQlE,KAAK,SAASC,QAAS,EAAKmE,mBAApC,wB,EAONQ,gBAAkB,WAChB,OACE,qCACE,oBAAI9E,UAAU,cAAd,yBACA,uBACEA,UAAU,iBACVyB,SAAU,EAAKqC,wBAFjB,UAIE,uBAAO9D,UAAU,uBAAuB0B,QAAQ,UAAhD,sBAGA,uBACE1B,UAAU,uBACViB,GAAG,QACHU,SAAU,EAAKuC,kBAEjB,uBAAOlE,UAAU,uBAAuB0B,QAAQ,SAAhD,qBAGA,uBACE1B,UAAU,uBACViB,GAAG,SACHU,SAAU,EAAKwC,iBAEjB,uBAAOnE,UAAU,uBAAuB0B,QAAQ,WAAhD,mBAGA,uBACE1B,UAAU,uBACViB,GAAG,WACHU,SAAU,EAAKJ,gBAEjB,uBAAOvB,UAAU,uBAAuB0B,QAAQ,UAAhD,kBAGA,uBACE1B,UAAU,uBACViB,GAAG,UACHU,SAAU,EAAKR,eAEjB,wBAAQnB,UAAU,+BAA+BE,KAAK,SAAtD,8B,EAQRc,kBAAoB,SAAC+C,GACnB,IAAQtB,EAAgB,EAAKhC,MAArBgC,YACFsC,EAAqBtC,EACrBuC,EAAevC,EAAYwC,MAC/B,SAACC,GAAD,OAAcA,EAASjE,KAAO8C,EAAS9C,MAEnCkE,EAAe1C,EAAY2C,WAC/B,SAACF,GAAD,OAAcA,EAASjE,KAAO8C,EAAS9C,MAEzC8D,EAAmBM,OAAOF,EAAc,EAAGpB,GAC3C,EAAK3C,SAAS,CAAEqB,YAAasC,IAC7Bd,MAAM,0BAAD,OACuBe,EAAatE,MADpC,8B,EAKP4E,kBAAoB,WAClB,IAAQ7C,EAAgB,EAAKhC,MAArBgC,YACR,OACE,sBAAKzC,UAAU,sBAAf,UACE,cAAC,IAAD,CACEA,UAAU,gBACV6B,QACE,wBAAQ7B,UAAU,0BAAlB,2BAEF8B,OAAK,EALP,SAOG,SAACC,GAAD,OACC,sBAAK/B,UAAU,0BAAf,UACE,wBACEA,UAAU,qBACVE,KAAK,SACLC,QAAS4B,EAHX,SAKE,cAAC,IAAD,CAASC,MAAM,UAAUC,KAAK,WAE/B,EAAK6C,wBAIZ,oBAAI9E,UAAU,oBAAd,SACGyC,EAAY8C,KAAI,SAACL,GAAD,OACf,cAAC,EAAD,CAEEnE,UAAWmE,EACXlE,kBAAmB,EAAKA,mBAFnBkE,EAASjE,a,4CAU1B,WACE,MAAmDW,KAAKnB,MAAhD8B,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,uBACxB,OACE,qCACE,cAAC,EAAD,IACA,sBAAKxC,UAAU,oBAAf,UACE,4BAAIuC,IACHC,EACC,wBAAQrC,QAASyB,KAAKkB,eAAtB,mCAEAlB,KAAK+C,8BAEN/C,KAAK0D,8B,GAlOGpD,aAyOJE,IChPAtC,G,MAAAA,aATE,kBACf,sBAAKE,UAAU,yBAAf,UACE,oBAAIA,UAAU,oBAAd,mDACA,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,wBAAQC,KAAK,SAAb,yD,iBCAAsF,G,kNACJ/E,MAAQ,CACNgF,SAAU,GACVC,SAAU,GACVC,qBAAsB,GACtBC,uBAAuB,EACvBC,UAAU,G,EAGZC,aAAe,kBACb,qBAAK9F,UAAU,uBAAf,SACE,cAAC,SAAD,CAAQE,KAAK,WAAW8B,MAAM,UAAU+D,OAAQ,GAAIC,MAAO,Q,EAI/DC,eAAiB,SAACC,GAChB,EAAK9E,SAAS,CACZwE,uBAAuB,EACvBD,qBAAsBO,K,EAI1BC,mBAAqB,SAACnD,GACpB,IAAQ5C,EAAY,EAAKL,MAAjBK,QACRC,IAAQ+F,IAAI,YAAapD,EAAU,CAAEqD,QAAS,GAAIC,KAAM,MACxDlG,EAAQG,QAAQ,M,EAGlBgG,kB,uCAAoB,WAAO1F,GAAP,2BAAAkC,EAAA,6DAClBlC,EAAMC,iBADY,EAEa,EAAKL,MAA5BgF,EAFU,EAEVA,SAAUC,EAFA,EAEAA,SACZc,EAAc,CAClBf,SAAUA,EACVC,SAAUA,GAEK,mDACXxC,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBmB,OAAQ,oBAEV5D,KAAMgD,KAAK8C,UAAUD,IAdL,SAgBUlD,MATX,mDAS2BJ,GAhB1B,cAgBZwD,EAhBY,iBAiBcA,EAAcjD,OAjB5B,QAiBZkD,EAjBY,OAkBdD,EAAclD,GAChB,EAAK2C,mBAAmBQ,EAAkB3D,UAE1C,EAAKiD,eAAeU,EAAkBC,SArBtB,4C,wDAyBpBC,iBAAmB,SAAChG,GAClB,EAAKO,SAAS,CAAEqE,SAAU5E,EAAMQ,OAAOC,S,EAGzCwF,iBAAmB,SAACjG,GAClB,EAAKO,SAAS,CAAEsE,SAAU7E,EAAMQ,OAAOC,S,EAGzCyF,gBAAkB,WAChB,MAAwD,EAAKtG,MAArDmF,EAAR,EAAQA,sBAAuBD,EAA/B,EAA+BA,qBAC/B,OACE,sBAAK3F,UAAU,uBAAf,UACE,oBAAIA,UAAU,qBAAd,mBACA,uBAAMA,UAAU,aAAayB,SAAU,EAAK8E,kBAA5C,UACE,uBAAOvG,UAAU,mBAAmB0B,QAAQ,oBAA5C,sBAGA,uBACExB,KAAK,OACLF,UAAU,mBACViB,GAAG,oBACHU,SAAU,EAAKkF,mBAEjB,uBAAO7G,UAAU,mBAAmB0B,QAAQ,oBAA5C,sBAGA,uBACExB,KAAK,WACLF,UAAU,mBACViB,GAAG,oBACHU,SAAU,EAAKmF,mBAEjB,wBAAQ5G,KAAK,SAASF,UAAU,2BAAhC,sBAID4F,EACC,oBAAI5F,UAAU,yBAAd,SAAwC2F,IACtC,S,4CAKV,WACE,OAAO/D,KAAKmF,sB,GAjGI7E,cAqGLpC,cAAW0F,GCvGpBrD,G,MACK,WADLA,EAEK,UAFLA,EAGK,UAHLA,EAIQ,cAGR6E,E,4MACJvG,MAAQ,CACNgF,SAAU,GACVC,SAAU,GACVuB,4BAA6B,GAC7BC,sBAAuB/E,G,EAGzBgF,yB,uCAA2B,WAAOtG,GAAP,2BAAAkC,EAAA,6DACzB,EAAK3B,SAAS,CAAE8F,sBAAuB/E,IACvCtB,EAAMC,iBAFmB,EAGM,EAAKL,MAA5BgF,EAHiB,EAGjBA,SAAUC,EAHO,EAGPA,SACZc,EAAc,CAClBf,SAAUA,EACVC,SAAUA,GAGV,sDACIxC,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBmB,OAAQ,oBAEV5D,KAAMgD,KAAK8C,UAAUD,IAhBE,SAkBMlD,MAT7B,sDASoDJ,GAlB7B,cAkBnBkE,EAlBmB,iBAmBUA,EAAiB3D,OAnB3B,QAmBnB4D,EAnBmB,OAoBrBD,EAAiB5D,GACnB,EAAKpC,SAAS,CACZ8F,sBAAuB/E,EACvB8E,4BAA6BI,EAAqBT,UAGpD,EAAKxF,SAAS,CACZ8F,sBAAuB/E,EACvB8E,4BAA6BI,EAAqBT,UA5B7B,4C,wDAiC3BU,uBAAyB,YAEvBC,EAD8B,EAAKxH,MAA3BwH,sB,EAIVV,iBAAmB,SAAChG,GAClB,EAAKO,SAAS,CAAEqE,SAAU5E,EAAMQ,OAAOC,S,EAGzCwF,iBAAmB,SAACjG,GAClB,EAAKO,SAAS,CAAEsE,SAAU7E,EAAMQ,OAAOC,S,EAGzCwE,aAAe,kBACb,qBAAK9F,UAAU,uBAAf,SACE,cAAC,IAAD,CAAQE,KAAK,WAAW8B,MAAM,UAAU+D,OAAQ,GAAIC,MAAO,Q,EAI/DwB,mCAAqC,WACnC,IAAQP,EAAgC,EAAKxG,MAArCwG,4BACR,OACE,sBAAKjH,UAAU,iCAAf,UACE,oBAAIA,UAAU,gCAAd,SACGiH,IAEH,wBACE/G,KAAK,SACLF,UAAU,eACVG,QAAS,EAAKmH,uBAHhB,uB,EAWNG,mCAAqC,WACnC,IAAQR,EAAgC,EAAKxG,MAArCwG,4BACR,OACE,qBAAKjH,UAAU,iCAAf,SACE,oBAAIA,UAAU,gCAAd,SACGiH,O,EAMTS,2BAA6B,WAE3B,OADkC,EAAKjH,MAA/ByG,uBAEN,KAAK/E,EACH,OAAO,EAAKsF,qCACd,KAAKtF,EACH,OAAO,EAAKqF,qCACd,KAAKrF,EACH,OAAO,EAAK2D,eACd,QACE,OAAO,O,4CAIb,WACE,OACE,8BACE,sBAAK9F,UAAU,8BAAf,UACE,oBAAIA,UAAU,4BAAd,2BACA,uBACEA,UAAU,oBACVyB,SAAUG,KAAKuF,yBAFjB,UAIE,uBACEnH,UAAU,0BACV0B,QAAQ,2BAFV,sBAMA,uBACExB,KAAK,OACLF,UAAU,0BACViB,GAAG,2BACHU,SAAUC,KAAKiF,mBAEjB,uBACE7G,UAAU,0BACV0B,QAAQ,2BAFV,sBAMA,uBACExB,KAAK,WACLF,UAAU,0BACViB,GAAG,2BACHU,SAAUC,KAAKkF,mBAEjB,wBAAQ5G,KAAK,SAASF,UAAU,kCAAhC,yBAID4B,KAAK8F,sC,GA5IOxF,aAmJR8E,ICtJTW,G,MACK,WADLA,EAEI,SAFJA,EAGO,aAGPC,E,4MACJnH,MAAQ,CACNoF,SAAU8B,G,EAEZJ,kBAAoB,WAClB,EAAKnG,SAAS,CAAEyE,SAAU8B,K,EAG5BE,wBAA0B,WACxB,EAAKzG,SAAS,CAAEyE,SAAU8B,K,EAG5BG,2BAA6B,WAC3B,EAAK1G,SAAS,CAAEyE,SAAU8B,K,EAG5BI,2BAA6B,kBAC3B,sBAAK/H,UAAU,kCAAf,UACE,oBAAIA,UAAU,yBAAd,uCACA,oBAAIA,UAAU,sBAAd,+DAGA,wBACEE,KAAK,SACLF,UAAU,wBACVG,QAAS,EAAK2H,2BAHhB,sBAOA,+EACA,wBACE5H,KAAK,SACLF,UAAU,wBACVG,QAAS,EAAK0H,wBAHhB,uB,EAUJG,wBAA0B,WAExB,OADqB,EAAKvH,MAAlBoF,UAEN,KAAK8B,EACH,OAAO,cAAC,EAAD,IACT,KAAKA,EACH,OAAO,cAAC,EAAD,CAAUJ,kBAAmB,EAAKA,oBAC3C,QACE,OAAO,EAAKQ,+B,4CAGlB,WAEE,YAAiBE,IADA5H,IAAQ4C,IAAI,aAEpB,cAAC,IAAD,CAAUhD,GAAG,MAEf2B,KAAKoG,8B,GAxDY9F,aA4Db0F,I,QChEAM,EARY,SAACnI,GAE1B,YAAiBkI,IADA5H,IAAQ4C,IAAI,aAEpB,cAAC,IAAD,CAAUhD,GAAG,mBAEf,cAAC,IAAD,eAAWF,KCeLoI,MAbf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAAC9B,KAAK,iBAAiB+B,UAAWT,IAC9C,cAAC,EAAD,CAAoBQ,OAAK,EAAC9B,KAAK,IAAI+B,UAAWjG,IAC9C,cAAC,IAAD,CAAOgG,OAAK,EAAC9B,KAAK,aAAa+B,UAAWC,IAC1C,cAAC,IAAD,CAAUrI,GAAG,qBCLNsI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.02e55181.chunk.js","sourcesContent":["import { withRouter, Link } from \"react-router-dom\";\nimport Cookies from \"js-cookie\";\n\nimport \"./index.css\";\n\nconst Header = (props) => {\n  const removeJwtToken = () => {\n    const { history } = props;\n    Cookies.remove(\"jwt_token\");\n    history.replace(\"/\");\n  };\n\n  return (\n    <div className=\"header-bg-container\">\n      <Link to=\"/\">Home</Link>\n      <button className=\"logout-button\" type=\"button\" onClick={removeJwtToken}>\n        Logout\n      </button>\n    </div>\n  );\n};\n\nexport default withRouter(Header);\n","import { Component } from \"react\";\nimport React from \"react\";\nimport { ImCross } from \"react-icons/im\";\nimport Popup from \"reactjs-popup\";\n\nimport \"./index.css\";\n\nclass ListItem extends Component {\n  state = {\n    title: \"\",\n    body: \"\",\n  };\n\n  onSubmitUpdateForm = (event) => {\n    event.preventDefault();\n    const { eachEntry, updateEntriesList } = this.props;\n    const { title, body } = this.state;\n    const updatedEntry = {\n      id: eachEntry.id,\n      userId: eachEntry.userId,\n      title: title,\n      body: body,\n    };\n    updateEntriesList(updatedEntry);\n  };\n\n  onChangeBody = (event) => {\n    this.setState({ body: event.target.value });\n  };\n\n  onChangeTitle = (event) => {\n    this.setState({ title: event.target.value });\n  };\n\n  updateEntryForm = () => {\n    return (\n      <form className=\"update-entry-form\" onSubmit={this.onSubmitUpdateForm}>\n        <label className=\"update-entry-form-label\" htmlFor=\"updateTitle\">\n          TITLE\n        </label>\n        <input\n          className=\"update-entry-form-input\"\n          id=\"updateTitle\"\n          onChange={this.onChangeTitle}\n        />\n        <label className=\"update-entry-form-label\" htmlFor=\"updateBody\">\n          BODY\n        </label>\n        <input\n          className=\"update-entry-form-input\"\n          id=\"updateBody\"\n          onChange={this.onChangeBody}\n        />\n        <button className=\"update-entry-form-submit-button\" type=\"submit\">\n          Update Entry\n        </button>\n      </form>\n    );\n  };\n\n  render() {\n    const eachEntry = this.props;\n    return (\n      <li>\n        <div className=\"each-entry-top-container\">\n          <h1 className=\"each-entry-title\">{eachEntry.eachEntry.title}</h1>\n          <Popup\n            className=\"popup-content\"\n            trigger={\n              <button className=\"display-update-form-button\">Update</button>\n            }\n            modal\n          >\n            {(close) => (\n              <div className=\"popup-content-container\">\n                <button\n                  className=\"popup-close-button\"\n                  type=\"button\"\n                  onClick={close}\n                >\n                  <ImCross color=\"#ffffff\" size=\"30px\" />\n                </button>\n                {this.updateEntryForm()}\n              </div>\n            )}\n          </Popup>\n        </div>\n        <p className=\"each-entry-body\">{eachEntry.eachEntry.body}</p>\n        <hr className=\"each-entry-hr-line\" />\n      </li>\n    );\n  }\n}\n\nexport default ListItem;\n","import { Component } from \"react\";\nimport React from \"react\";\nimport Popup from \"reactjs-popup\";\nimport Cookies from \"js-cookie\";\n\nimport { ImCross } from \"react-icons/im\";\n\nimport Header from \"../Header\";\nimport ListItem from \"../ListItem\";\n\nimport \"./index.css\";\n\nconst apiConstants = {\n  initial: \"INITIAL\",\n  success: \"SUCCESS\",\n  failure: \"FAILURE\",\n  inProgress: \"IN_PROGRESS\",\n};\n\nclass Home extends Component {\n  state = {\n    apiStatus: apiConstants.initial,\n    selectedFile: null,\n    uploadResponse: \"\",\n    isUploadedSuccessfully: false,\n    entriesList: [],\n    newEntryId: \"\",\n    newEntryUserId: \"\",\n    newTitle: \"\",\n    newBody: \"\",\n  };\n\n  getEntriesData = async () => {\n    this.setState({ apiStatus: apiConstants.inProgress });\n    const jwtToken = Cookies.get(\"jwt_token\");\n    const apiUrl = \"https://srikanthdisplaydata.herokuapp.com/getEntriesData/\";\n    const options = {\n      method: \"GET\",\n      headers: {\n        authorization: `bearer ${jwtToken}`,\n        \"Content-Type\": \"application / json\",\n      },\n    };\n    const entriesListResponse = await fetch(apiUrl, options);\n    if (entriesListResponse.ok) {\n      const entriesListJson = await entriesListResponse.json();\n      this.setState({\n        entriesList: JSON.parse(entriesListJson.entriesData),\n        apiStatus: apiConstants.success,\n      });\n    } else {\n      this.setState({ apiStatus: apiConstants.failure });\n    }\n  };\n\n  onSubmitAddNewEntryForm = (event) => {\n    event.preventDefault();\n    const {\n      entriesList,\n      newEntryId,\n      newEntryUserId,\n      newTitle,\n      newBody,\n    } = this.state;\n    const newEntry = {\n      id: newEntryId,\n      userId: newEntryUserId,\n      title: newTitle,\n      body: newBody,\n    };\n    const newEntriesList = [...entriesList, newEntry];\n    this.setState({ entriesList: newEntriesList });\n    alert(`New Entry With The Name: ${newTitle} Is Added To The List`);\n  };\n\n  onChangeEntryId = (event) => {\n    this.setState({ newEntryId: event.target.value });\n  };\n\n  onChangeUserId = (event) => {\n    this.setState({ newEntryUserId: event.target.value });\n  };\n\n  onChangeBody = (event) => {\n    this.setState({ newBody: event.target.value });\n  };\n\n  onChangeTitle = (event) => {\n    this.setState({ newTitle: event.target.value });\n  };\n\n  selectFileToBeUploaded = (event) => {\n    this.setState({ selectedFile: event.target.files[0] });\n  };\n\n  uploadSelectedFile = async (event) => {\n    const { selectedFile } = this.state;\n    const jwtToken = Cookies.get(\"jwt_token\");\n    const uploadUrl = \"https://srikanthdisplaydata.herokuapp.com/uploadFile/\";\n    const options = {\n      method: \"POST\",\n      headers: {\n        authorization: `bearer ${jwtToken}`,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: selectedFile,\n    };\n    const uploadFileResponse = await fetch(uploadUrl, options);\n    const uploadFileResponseData = await uploadFileResponse.json();\n    this.setState({\n      uploadResponse: uploadFileResponseData.msg,\n      isUploadedSuccessfully: true,\n    });\n  };\n\n  selectAndUploadFileToServer = () => {\n    return (\n      <div>\n        <input\n          type=\"file\"\n          name=\"sampleFile\"\n          accept=\"application/json\"\n          onChange={this.selectFileToBeUploaded}\n        />\n        <button type=\"submit\" onClick={this.uploadSelectedFile}>\n          upload\n        </button>\n      </div>\n    );\n  };\n\n  addNewEntryForm = () => {\n    return (\n      <>\n        <h1 className=\"app-heading\">FinancePeer</h1>\n        <form\n          className=\"add-entry-form\"\n          onSubmit={this.onSubmitAddNewEntryForm}\n        >\n          <label className=\"add-entry-form-label\" htmlFor=\"entryId\">\n            ENTRY ID\n          </label>\n          <input\n            className=\"add-entry-form-input\"\n            id=\"addId\"\n            onChange={this.onChangeEntryId}\n          />\n          <label className=\"add-entry-form-label\" htmlFor=\"userId\">\n            USER ID\n          </label>\n          <input\n            className=\"add-entry-form-input\"\n            id=\"userId\"\n            onChange={this.onChangeUserId}\n          />\n          <label className=\"add-entry-form-label\" htmlFor=\"addTitle\">\n            TITLE\n          </label>\n          <input\n            className=\"add-entry-form-input\"\n            id=\"addTitle\"\n            onChange={this.onChangeTitle}\n          />\n          <label className=\"add-entry-form-label\" htmlFor=\"addBody\">\n            BODY\n          </label>\n          <input\n            className=\"add-entry-form-input\"\n            id=\"addBody\"\n            onChange={this.onChangeBody}\n          />\n          <button className=\"add-entry-form-submit-button\" type=\"submit\">\n            Add Entry\n          </button>\n        </form>\n      </>\n    );\n  };\n\n  updateEntriesList = (newEntry) => {\n    const { entriesList } = this.state;\n    const updatedEntriesList = entriesList;\n    const currentEntry = entriesList.find(\n      (eachItem) => eachItem.id === newEntry.id\n    );\n    const indexOfEntry = entriesList.findIndex(\n      (eachItem) => eachItem.id === newEntry.id\n    );\n    updatedEntriesList.splice(indexOfEntry, 1, newEntry);\n    this.setState({ entriesList: updatedEntriesList });\n    alert(\n      `Entry With The Title: \"${currentEntry.title}\" Is Going To Be Updated`\n    );\n  };\n\n  renderEntriesList = () => {\n    const { entriesList } = this.state;\n    return (\n      <div className=\"home-list-container\">\n        <Popup\n          className=\"popup-content\"\n          trigger={\n            <button className=\"display-add-form-button\">Add New Entry</button>\n          }\n          modal\n        >\n          {(close) => (\n            <div className=\"popup-content-container\">\n              <button\n                className=\"popup-close-button\"\n                type=\"button\"\n                onClick={close}\n              >\n                <ImCross color=\"#ffffff\" size=\"30px\" />\n              </button>\n              {this.addNewEntryForm()}\n            </div>\n          )}\n        </Popup>\n        <ul className=\"home-entries-list\">\n          {entriesList.map((eachItem) => (\n            <ListItem\n              key={eachItem.id}\n              eachEntry={eachItem}\n              updateEntriesList={this.updateEntriesList}\n            />\n          ))}\n        </ul>\n      </div>\n    );\n  };\n\n  render() {\n    const { uploadResponse, isUploadedSuccessfully } = this.state;\n    return (\n      <>\n        <Header />\n        <div className=\"home-bg-container\">\n          <p>{uploadResponse}</p>\n          {isUploadedSuccessfully ? (\n            <button onClick={this.getEntriesData}>display uploaded data</button>\n          ) : (\n            this.selectAndUploadFileToServer()\n          )}\n          {this.renderEntriesList()}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Home;\n","import { withRouter, Link } from \"react-router-dom\";\nimport \"./index.css\";\n\nconst NotFound = () => (\n  <div className=\"not-found-bg-container\">\n    <h1 className=\"not-found-heading\">Welcome To FinancePeer Code Challenge</h1>\n    <Link to=\"/\">\n      <button type=\"button\">Please Click Here To Visit Website</button>\n    </Link>\n  </div>\n);\n\nexport default withRouter(NotFound);\n","import { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Cookies from \"js-cookie\";\nimport { Loader } from \"react-loader-spinner\";\n\nimport \"./index.css\";\n\nclass Login extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    loginResponseMessage: \"\",\n    showLoginErrorMessage: false,\n    isMember: false,\n  };\n\n  renderLoader = () => (\n    <div className=\"react-loader-spinner\">\n      <Loader type=\"TailSpin\" color=\"#00BFFF\" height={80} width={80} />\n    </div>\n  );\n\n  onLoginFailure = (errorMessage) => {\n    this.setState({\n      showLoginErrorMessage: true,\n      loginResponseMessage: errorMessage,\n    });\n  };\n\n  onSuccessFullLogin = (jwtToken) => {\n    const { history } = this.props;\n    Cookies.set(\"jwt_token\", jwtToken, { expires: 30, path: \"/\" });\n    history.replace(\"/\");\n  };\n\n  onSubmitLoginForm = async (event) => {\n    event.preventDefault();\n    const { username, password } = this.state;\n    const userDetails = {\n      username: username,\n      password: password,\n    };\n    const loginUrl = \"https://srikanthdisplaydata.herokuapp.com/login/\";\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify(userDetails),\n    };\n    const loginResponse = await fetch(loginUrl, options);\n    const loginResponseJson = await loginResponse.json();\n    if (loginResponse.ok) {\n      this.onSuccessFullLogin(loginResponseJson.jwtToken);\n    } else {\n      this.onLoginFailure(loginResponseJson.message);\n    }\n  };\n\n  onChangeUsername = (event) => {\n    this.setState({ username: event.target.value });\n  };\n\n  onChangePassword = (event) => {\n    this.setState({ password: event.target.value });\n  };\n\n  renderLoginForm = () => {\n    const { showLoginErrorMessage, loginResponseMessage } = this.state;\n    return (\n      <div className=\"login-form-container\">\n        <h1 className=\"login-form-heading\">Login</h1>\n        <form className=\"login-form\" onSubmit={this.onSubmitLoginForm}>\n          <label className=\"login-form-label\" htmlFor=\"loginFormUsername\">\n            Username\n          </label>\n          <input\n            type=\"text\"\n            className=\"login-form-input\"\n            id=\"loginFormUsername\"\n            onChange={this.onChangeUsername}\n          />\n          <label className=\"login-form-label\" htmlFor=\"loginFormPassword\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            className=\"login-form-input\"\n            id=\"loginFormPassword\"\n            onChange={this.onChangePassword}\n          />\n          <button type=\"submit\" className=\"login-form-submit-button\">\n            Login\n          </button>\n        </form>\n        {showLoginErrorMessage ? (\n          <h1 className=\"login-response-heading\">{loginResponseMessage}</h1>\n        ) : null}\n      </div>\n    );\n  };\n\n  render() {\n    return this.renderLoginForm();\n  }\n}\n\nexport default withRouter(Login);\n","import { Component } from \"react\";\nimport Loader from \"react-loader-spinner\";\n\nimport \"./index.css\";\n\nconst apiConstants = {\n  initial: \"INITIAL\",\n  failure: \"FAILURE\",\n  success: \"SUCCESS\",\n  inProgress: \"IN_PROGRESS\",\n};\n\nclass Register extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    registrationResponseMessage: \"\",\n    registrationApiStatus: apiConstants.initial,\n  };\n\n  onSubmitRegistrationForm = async (event) => {\n    this.setState({ registrationApiStatus: apiConstants.inProgress });\n    event.preventDefault();\n    const { username, password } = this.state;\n    const userDetails = {\n      username: username,\n      password: password,\n    };\n    const registrationUrl =\n      \"https://srikanthdisplaydata.herokuapp.com/register/\";\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify(userDetails),\n    };\n    const registerResponse = await fetch(registrationUrl, options);\n    const registerResponseJson = await registerResponse.json();\n    if (registerResponse.ok) {\n      this.setState({\n        registrationApiStatus: apiConstants.success,\n        registrationResponseMessage: registerResponseJson.message,\n      });\n    } else {\n      this.setState({\n        registrationApiStatus: apiConstants.failure,\n        registrationResponseMessage: registerResponseJson.message,\n      });\n    }\n  };\n\n  loginAfterRegistration = () => {\n    const { setStateToInitial } = this.props;\n    setStateToInitial();\n  };\n\n  onChangeUsername = (event) => {\n    this.setState({ username: event.target.value });\n  };\n\n  onChangePassword = (event) => {\n    this.setState({ password: event.target.value });\n  };\n\n  renderLoader = () => (\n    <div className=\"react-loader-spinner\">\n      <Loader type=\"TailSpin\" color=\"#00BFFF\" height={80} width={80} />\n    </div>\n  );\n\n  renderRegistrationSuccessContainer = () => {\n    const { registrationResponseMessage } = this.state;\n    return (\n      <div className=\"registration-success-container\">\n        <h1 className=\"registration-response-heading\">\n          {registrationResponseMessage}\n        </h1>\n        <button\n          type=\"button\"\n          className=\"login-button\"\n          onClick={this.loginAfterRegistration}\n        >\n          Login\n        </button>\n      </div>\n    );\n  };\n\n  renderRegistrationFailureContainer = () => {\n    const { registrationResponseMessage } = this.state;\n    return (\n      <div className=\"registration-failure-container\">\n        <h1 className=\"registration-response-heading\">\n          {registrationResponseMessage}\n        </h1>\n      </div>\n    );\n  };\n\n  renderRegistrationResponse = () => {\n    const { registrationApiStatus } = this.state;\n    switch (registrationApiStatus) {\n      case apiConstants.failure:\n        return this.renderRegistrationFailureContainer();\n      case apiConstants.success:\n        return this.renderRegistrationSuccessContainer();\n      case apiConstants.inProgress:\n        return this.renderLoader();\n      default:\n        return null;\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"registration-form-container\">\n          <h1 className=\"registration-form-heading\">Register Here</h1>\n          <form\n            className=\"registration-form\"\n            onSubmit={this.onSubmitRegistrationForm}\n          >\n            <label\n              className=\"registration-form-label\"\n              htmlFor=\"registrationFormUsername\"\n            >\n              Username\n            </label>\n            <input\n              type=\"text\"\n              className=\"registration-form-input\"\n              id=\"registrationFormUsername\"\n              onChange={this.onChangeUsername}\n            />\n            <label\n              className=\"registration-form-label\"\n              htmlFor=\"registrationFormPassword\"\n            >\n              Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"registration-form-input\"\n              id=\"registrationFormPassword\"\n              onChange={this.onChangePassword}\n            />\n            <button type=\"submit\" className=\"registration-form-submit-button\">\n              Register\n            </button>\n          </form>\n          {this.renderRegistrationResponse()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Register;\n","import { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Cookies from \"js-cookie\";\n\nimport Login from \"../Login\";\nimport Register from \"../Register\";\n\nimport \"./index.css\";\n\nconst userStatusConstants = {\n  initial: \"INITIAL\",\n  member: \"MEMBER\",\n  notMember: \"NOT_MEMBER\",\n};\n\nclass LoginRegister extends Component {\n  state = {\n    isMember: userStatusConstants.initial,\n  };\n  setStateToInitial = () => {\n    this.setState({ isMember: userStatusConstants.initial });\n  };\n\n  onClickDisplayLoginForm = () => {\n    this.setState({ isMember: userStatusConstants.member });\n  };\n\n  onClickDisplayRegisterForm = () => {\n    this.setState({ isMember: userStatusConstants.notMember });\n  };\n\n  renderLoginRegisterButtons = () => (\n    <div className=\"register-login-button-container\">\n      <h1 className=\"login-register-heading\">Welcome To FinancePeer...</h1>\n      <h2 className=\"login-register-text\">\n        Not Our Member Till Now ? Please Register Here...\n      </h2>\n      <button\n        type=\"button\"\n        className=\"register-login-button\"\n        onClick={this.onClickDisplayRegisterForm}\n      >\n        Register\n      </button>\n      <h2>Already A Member Of Us ? Please Login Here...</h2>\n      <button\n        type=\"button\"\n        className=\"register-login-button\"\n        onClick={this.onClickDisplayLoginForm}\n      >\n        Login\n      </button>\n    </div>\n  );\n\n  renderLoginRegisterPage = () => {\n    const { isMember } = this.state;\n    switch (isMember) {\n      case userStatusConstants.member:\n        return <Login />;\n      case userStatusConstants.notMember:\n        return <Register setStateToInitial={this.setStateToInitial} />;\n      default:\n        return this.renderLoginRegisterButtons();\n    }\n  };\n  render() {\n    const jwtToken = Cookies.get(\"jwt_token\");\n    if (jwtToken !== undefined) {\n      return <Redirect to=\"/\" />;\n    }\n    return this.renderLoginRegisterPage();\n  }\n}\n\nexport default LoginRegister;\n","import { Route, Redirect } from \"react-router-dom\";\nimport Cookies from \"js-cookie\";\n\nconst AuthenticatedRoute = (props) => {\n  const jwtToken = Cookies.get(\"jwt_token\");\n  if (jwtToken === undefined) {\n    return <Redirect to=\"/loginRegister\" />;\n  }\n  return <Route {...props} />;\n};\n\nexport default AuthenticatedRoute;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport Home from \"./components/Home\";\nimport NotFound from \"./components/NotFound\";\nimport LoginRegister from \"./components/LoginRegister\";\nimport AuthenticatedRoute from \"./components/AuthenticatedRoute\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/loginRegister\" component={LoginRegister} />\n        <AuthenticatedRoute exact path=\"/\" component={Home} />\n        <Route exact path=\"/not-found\" component={NotFound} />\n        <Redirect to=\"/not-found\" />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}