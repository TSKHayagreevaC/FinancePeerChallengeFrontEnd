{"version":3,"sources":["components/Header/index.js","components/ListItem/index.js","components/Home/index.js","components/AboutRoute/index.js","components/NotFound/index.js","components/Login/index.js","components/Register/index.js","components/LoginRegister/index.js","components/AuthenticatedRoute/index.js","App.js","reportWebVitals.js","index.js"],"names":["withRouter","props","className","to","type","onClick","history","Cookies","remove","replace","ListItem","state","title","body","onSubmitUpdateForm","event","preventDefault","eachEntry","updateEntriesList","id","userId","onChangeBody","setState","target","value","onChangeTitle","updateEntryForm","onSubmit","htmlFor","onChange","this","trigger","modal","close","color","size","Component","apiConstants","Home","apiStatus","selectedFile","uploadResponse","entriesList","newEntryId","newEntryUserId","newTitle","newBody","getEntriesData","a","jwtToken","get","options","method","headers","authorization","fetch","entriesListResponse","ok","json","entriesListJson","JSON","parse","entriesData","onSubmitAddNewEntryForm","newEntry","newEntriesList","alert","onChangeEntryId","onChangeUserId","selectFileToBeUploaded","files","uploadSelectedFile","Accept","uploadFileResponse","uploadFileResponseData","msg","selectAndUploadFileToServer","name","accept","addNewEntryForm","updatedEntriesList","currentEntry","find","eachItem","indexOfEntry","findIndex","splice","renderEntriesList","map","addEntryPopup","uploadedSuccessfully","failedToUpload","About","Login","username","password","loginResponseMessage","showLoginErrorMessage","isMember","renderLoader","height","width","renderLoginErrorMessage","onLoginFailure","errorMessage","onSuccessFullLogin","set","expires","path","onSubmitLoginForm","userDetails","stringify","loginResponse","loginResponseJson","message","onChangeUsername","onChangePassword","renderLoginForm","Register","registrationResponseMessage","registrationApiStatus","onSubmitRegistrationForm","registerResponse","registerResponseJson","loginAfterRegistration","setStateToInitial","renderRegistrationSuccessContainer","renderRegistrationFailureContainer","renderRegistrationResponse","userStatusConstants","LoginRegister","onClickDisplayLoginForm","onClickDisplayRegisterForm","renderLoginRegisterButtons","renderLoginRegisterPage","undefined","AuthenticatedRoute","App","exact","component","NotFound","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a6fdf9c.chunk.js","sourcesContent":["import { withRouter, Link } from \"react-router-dom\";\nimport Cookies from \"js-cookie\";\n\nimport \"./index.css\";\n\nconst Header = (props) => {\n  const removeJwtToken = () => {\n    const { history } = props;\n    Cookies.remove(\"jwt_token\");\n    history.replace(\"/\");\n  };\n\n  return (\n    <div className=\"header-bg-container\">\n      <Link to=\"/\" className=\"header-link-style\">\n        Home\n      </Link>\n      <Link to=\"/about\" className=\"header-link-style\">\n        About\n      </Link>\n      <button className=\"button-style\" type=\"button\" onClick={removeJwtToken}>\n        Logout\n      </button>\n    </div>\n  );\n};\n\nexport default withRouter(Header);\n","import { Component } from \"react\";\nimport React from \"react\";\nimport { ImCross } from \"react-icons/im\";\nimport Popup from \"reactjs-popup\";\n\nimport \"./index.css\";\n\nclass ListItem extends Component {\n  state = {\n    title: \"\",\n    body: \"\",\n  };\n\n  onSubmitUpdateForm = (event) => {\n    event.preventDefault();\n    const { eachEntry, updateEntriesList } = this.props;\n    const { title, body } = this.state;\n    const updatedEntry = {\n      id: eachEntry.id,\n      userId: eachEntry.userId,\n      title: title,\n      body: body,\n    };\n    updateEntriesList(updatedEntry);\n  };\n\n  onChangeBody = (event) => {\n    this.setState({ body: event.target.value });\n  };\n\n  onChangeTitle = (event) => {\n    this.setState({ title: event.target.value });\n  };\n\n  updateEntryForm = () => {\n    return (\n      <form className=\"update-entry-form\" onSubmit={this.onSubmitUpdateForm}>\n        <label className=\"update-entry-form-label\" htmlFor=\"updateTitle\">\n          TITLE\n        </label>\n        <input\n          className=\"update-entry-form-input\"\n          id=\"updateTitle\"\n          onChange={this.onChangeTitle}\n        />\n        <label className=\"update-entry-form-label\" htmlFor=\"updateBody\">\n          BODY\n        </label>\n        <input\n          className=\"update-entry-form-input\"\n          id=\"updateBody\"\n          onChange={this.onChangeBody}\n        />\n        <button className=\"update-entry-form-submit-button\" type=\"submit\">\n          Update Entry\n        </button>\n      </form>\n    );\n  };\n\n  render() {\n    const eachEntry = this.props;\n    return (\n      <li>\n        <div className=\"each-entry-top-container\">\n          <h1 className=\"each-entry-title\">{eachEntry.eachEntry.title}</h1>\n          <Popup\n            className=\"popup-content\"\n            trigger={\n              <button className=\"display-update-form-button\">Update</button>\n            }\n            modal\n          >\n            {(close) => (\n              <div className=\"popup-content-container\">\n                <button\n                  className=\"popup-close-button\"\n                  type=\"button\"\n                  onClick={close}\n                >\n                  <ImCross color=\"#ffffff\" size=\"30px\" />\n                </button>\n                {this.updateEntryForm()}\n              </div>\n            )}\n          </Popup>\n        </div>\n        <p className=\"each-entry-body\">{eachEntry.eachEntry.body}</p>\n        <hr className=\"each-entry-hr-line\" />\n      </li>\n    );\n  }\n}\n\nexport default ListItem;\n","import { Component } from \"react\";\nimport React from \"react\";\nimport Popup from \"reactjs-popup\";\nimport Cookies from \"js-cookie\";\n\nimport { ImCross } from \"react-icons/im\";\n\nimport Header from \"../Header\";\nimport ListItem from \"../ListItem\";\n\nimport \"./index.css\";\n\nconst apiConstants = {\n  initial: \"INITIAL\",\n  success: \"SUCCESS\",\n  failure: \"FAILURE\",\n  inProgress: \"IN_PROGRESS\",\n};\n\nclass Home extends Component {\n  state = {\n    apiStatus: apiConstants.initial,\n    selectedFile: null,\n    uploadResponse: \"\",\n    entriesList: [],\n    newEntryId: \"\",\n    newEntryUserId: \"\",\n    newTitle: \"\",\n    newBody: \"\",\n  };\n\n  getEntriesData = async () => {\n    this.setState({ apiStatus: apiConstants.inProgress });\n    const jwtToken = Cookies.get(\"jwt_token\");\n    const apiUrl = \"https://srikanthdisplaydata.herokuapp.com/getEntriesData/\";\n    const options = {\n      method: \"GET\",\n      headers: {\n        authorization: `bearer ${jwtToken}`,\n        \"Content-Type\": \"application / json\",\n      },\n    };\n    const entriesListResponse = await fetch(apiUrl, options);\n    if (entriesListResponse.ok) {\n      const entriesListJson = await entriesListResponse.json();\n      this.setState({\n        entriesList: JSON.parse(entriesListJson.entriesData),\n        apiStatus: apiConstants.success,\n      });\n    } else {\n      this.setState({ apiStatus: apiConstants.failure });\n    }\n  };\n\n  onSubmitAddNewEntryForm = (event) => {\n    event.preventDefault();\n    const {\n      entriesList,\n      newEntryId,\n      newEntryUserId,\n      newTitle,\n      newBody,\n    } = this.state;\n    const newEntry = {\n      id: newEntryId,\n      userId: newEntryUserId,\n      title: newTitle,\n      body: newBody,\n    };\n    const newEntriesList = [...entriesList, newEntry];\n    this.setState({ entriesList: newEntriesList });\n    alert(`New Entry With The Name: ${newTitle} Is Added To The List`);\n  };\n\n  onChangeEntryId = (event) => {\n    this.setState({ newEntryId: event.target.value });\n  };\n\n  onChangeUserId = (event) => {\n    this.setState({ newEntryUserId: event.target.value });\n  };\n\n  onChangeBody = (event) => {\n    this.setState({ newBody: event.target.value });\n  };\n\n  onChangeTitle = (event) => {\n    this.setState({ newTitle: event.target.value });\n  };\n\n  selectFileToBeUploaded = (event) => {\n    this.setState({ selectedFile: event.target.files[0] });\n  };\n\n  uploadSelectedFile = async (event) => {\n    const { selectedFile } = this.state;\n    const jwtToken = Cookies.get(\"jwt_token\");\n    const uploadUrl = \"https://srikanthdisplaydata.herokuapp.com/uploadFile/\";\n    const options = {\n      method: \"POST\",\n      headers: {\n        authorization: `bearer ${jwtToken}`,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: selectedFile,\n    };\n    const uploadFileResponse = await fetch(uploadUrl, options);\n    const uploadFileResponseData = await uploadFileResponse.json();\n    this.setState({\n      uploadResponse: uploadFileResponseData.msg,\n    });\n  };\n\n  selectAndUploadFileToServer = () => {\n    return (\n      <div className=\"file-upload-container\">\n        <h2 className=\"select-file-heading\">Upload File</h2>\n        <input\n          type=\"file\"\n          name=\"sampleFile\"\n          accept=\"application/json\"\n          className=\"file-input-style\"\n          onChange={this.selectFileToBeUploaded}\n        />\n        <button\n          type=\"button\"\n          className=\"button-style\"\n          onClick={this.uploadSelectedFile}\n        >\n          upload\n        </button>\n      </div>\n    );\n  };\n\n  addNewEntryForm = () => {\n    return (\n      <>\n        <h1 className=\"add-entry-form-heading\">Add Entry Here</h1>\n        <form\n          className=\"add-entry-form\"\n          onSubmit={this.onSubmitAddNewEntryForm}\n        >\n          <label className=\"add-entry-form-label\" htmlFor=\"entryId\">\n            ENTRY ID\n          </label>\n          <input\n            className=\"add-entry-form-input\"\n            id=\"addId\"\n            onChange={this.onChangeEntryId}\n          />\n          <label className=\"add-entry-form-label\" htmlFor=\"userId\">\n            USER ID\n          </label>\n          <input\n            className=\"add-entry-form-input\"\n            id=\"userId\"\n            onChange={this.onChangeUserId}\n          />\n          <label className=\"add-entry-form-label\" htmlFor=\"addTitle\">\n            TITLE\n          </label>\n          <input\n            className=\"add-entry-form-input\"\n            id=\"addTitle\"\n            onChange={this.onChangeTitle}\n          />\n          <label className=\"add-entry-form-label\" htmlFor=\"addBody\">\n            BODY\n          </label>\n          <input\n            className=\"add-entry-form-input\"\n            id=\"addBody\"\n            onChange={this.onChangeBody}\n          />\n          <button className=\"add-entry-form-submit-button\" type=\"submit\">\n            Add Entry\n          </button>\n        </form>\n      </>\n    );\n  };\n\n  updateEntriesList = (newEntry) => {\n    const { entriesList } = this.state;\n    const updatedEntriesList = entriesList;\n    const currentEntry = entriesList.find(\n      (eachItem) => eachItem.id === newEntry.id\n    );\n    const indexOfEntry = entriesList.findIndex(\n      (eachItem) => eachItem.id === newEntry.id\n    );\n    updatedEntriesList.splice(indexOfEntry, 1, newEntry);\n    this.setState({ entriesList: updatedEntriesList });\n    alert(\n      `Entry With The Title: \"${currentEntry.title}\" Is Going To Be Updated`\n    );\n  };\n\n  renderEntriesList = () => {\n    const { entriesList } = this.state;\n    return (\n      <div className=\"home-list-container\">\n        <ul className=\"home-entries-list\">\n          {entriesList.map((eachItem) => (\n            <ListItem\n              key={eachItem.id}\n              eachEntry={eachItem}\n              updateEntriesList={this.updateEntriesList}\n            />\n          ))}\n        </ul>\n      </div>\n    );\n  };\n\n  addEntryPopup = () => (\n    <Popup\n      className=\"popup-content\"\n      trigger={\n        <button className=\"button-style display-add-form-button\">\n          Add New Entry\n        </button>\n      }\n      modal\n    >\n      {(close) => (\n        <div className=\"popup-content-container\">\n          <button className=\"popup-close-button\" type=\"button\" onClick={close}>\n            <ImCross color=\"#ffffff\" size=\"30px\" />\n          </button>\n          {this.addNewEntryForm()}\n        </div>\n      )}\n    </Popup>\n  );\n\n  render() {\n    const { uploadResponse } = this.state;\n    const uploadedSuccessfully =\n      uploadResponse === \"data of the file is uploaded into database...\";\n    const failedToUpload = uploadResponse === \"invalid file\";\n    return (\n      <div className=\"home-bg-container\">\n        <div className=\"home-header-container\">\n          <Header />\n        </div>\n        <div className=\"file-input-entry-button-container\">\n          <div className=\"file-input-container\">\n            {this.selectAndUploadFileToServer()}\n            {uploadedSuccessfully ? (\n              <button className=\"button-style\" onClick={this.getEntriesData}>\n                click here to display uploaded data\n              </button>\n            ) : null}\n            {failedToUpload ? (\n              <p className=\"alert-message-para\">{uploadResponse}</p>\n            ) : null}\n          </div>\n          <div className=\"add-new-entry-popup\">{this.addEntryPopup()}</div>\n        </div>\n        <div className=\"home-scroll-list\">{this.renderEntriesList()}</div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import Header from \"../Header\";\nimport \"./index.css\";\n\nconst About = () => (\n  <div className=\"about-bg-container\">\n    <Header className=\"about-header-element\" />\n    <h1 className=\"about-heading\">About This Web Application</h1>\n    <h3 className=\"sub-heading\">Tools</h3>\n    <h5 className=\"micro-heading\">\n      This web application is built using the following technologies...\n    </h5>\n    <ol className=\"about-tools-list\">\n      <li>Front End With ReactJs Framework.</li>\n      <li>BackEnd With the NodeJs and ExpressJs Frameworks.</li>\n      <li>Backend is integrated with sqlite3 database.</li>\n      <li>Front End Deployment with the Github pages.</li>\n      <li>Backend Deployment with the Heroku.</li>\n    </ol>\n    <h3 className=\"sub-heading\">Functionalities</h3>\n    <h5 className=\"micro-heading\">\n      This web app performs following functionalities...\n    </h5>\n    <ol className=\"about-functionality-list\">\n      <li>A new user can register with the unique username and password.</li>\n      <li>\n        Registered users can login with their unique usernames and passwords.\n      </li>\n      <li>\n        li>Every user after registration/login can access home route, about\n        route and logout button at the header section.\n      </li>\n      <li>\n        Every registered user can select and upload the file using input below\n        the header section. Then user can display the data, add new item, update\n        the existing item and view the same data.\n      </li>\n      <li>\n        This app automatically deletes all the rows of the database here by\n        making the database empty when a new file is uploaded through the upload\n        api call.\n      </li>\n      <li>\n        All the new entries which are added to the list of entries and the\n        updated entries are not uploaded into the database and only done in the\n        local storage, so will be deleted when page is reloaded or when\n        navigated between the routes or even when a new file is uploaded.\n      </li>\n    </ol>\n  </div>\n);\n\nexport default About;\n","import { withRouter, Link } from \"react-router-dom\";\nimport \"./index.css\";\n\nconst NotFound = () => (\n  <div className=\"not-found-bg-container\">\n    <div className=\"not-found-content-container\">\n      <h1 className=\"not-found-heading\">\n        Welcome To FinancePeer Code Challenge\n      </h1>\n      <Link to=\"/\">\n        <button type=\"button\" className=\"welcome-button\">\n          Please Click Here To Visit Website\n        </button>\n      </Link>\n    </div>\n  </div>\n);\n\nexport default withRouter(NotFound);\n","import { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Cookies from \"js-cookie\";\nimport { Loader } from \"react-loader-spinner\";\n\nimport \"./index.css\";\n\nclass Login extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    loginResponseMessage: \"\",\n    showLoginErrorMessage: false,\n    isMember: false,\n  };\n\n  renderLoader = () => (\n    <div className=\"react-loader-spinner\">\n      <Loader type=\"TailSpin\" color=\"red\" height={80} width={80} />\n    </div>\n  );\n\n  renderLoginErrorMessage = () => {\n    const { loginResponseMessage } = this.state;\n    return <h1 className=\"login-response-heading\">{loginResponseMessage}</h1>;\n  };\n\n  onLoginFailure = (errorMessage) => {\n    this.setState({\n      showLoginErrorMessage: true,\n      loginResponseMessage: errorMessage,\n    });\n  };\n\n  onSuccessFullLogin = (jwtToken) => {\n    const { history } = this.props;\n    Cookies.set(\"jwt_token\", jwtToken, { expires: 30, path: \"/\" });\n    history.replace(\"/\");\n  };\n\n  onSubmitLoginForm = async (event) => {\n    event.preventDefault();\n    const { username, password } = this.state;\n    const userDetails = {\n      username: username,\n      password: password,\n    };\n    const loginUrl = \"https://srikanthdisplaydata.herokuapp.com/login/\";\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify(userDetails),\n    };\n    const loginResponse = await fetch(loginUrl, options);\n    const loginResponseJson = await loginResponse.json();\n    if (loginResponse.ok) {\n      this.onSuccessFullLogin(loginResponseJson.jwtToken);\n    } else {\n      this.onLoginFailure(loginResponseJson.message);\n    }\n  };\n\n  onChangeUsername = (event) => {\n    this.setState({ username: event.target.value });\n  };\n\n  onChangePassword = (event) => {\n    this.setState({ password: event.target.value });\n  };\n\n  renderLoginForm = () => {\n    const { showLoginErrorMessage } = this.state;\n    return (\n      <div className=\"login-bg-container\">\n        <div className=\"login-form-container\">\n          <h1 className=\"login-form-heading\">Login Here</h1>\n          <form className=\"login-form\" onSubmit={this.onSubmitLoginForm}>\n            <label className=\"login-form-label\" htmlFor=\"loginFormUsername\">\n              Username\n            </label>\n            <input\n              type=\"text\"\n              className=\"login-form-input\"\n              id=\"loginFormUsername\"\n              onChange={this.onChangeUsername}\n            />\n            <label className=\"login-form-label\" htmlFor=\"loginFormPassword\">\n              Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"login-form-input\"\n              id=\"loginFormPassword\"\n              onChange={this.onChangePassword}\n            />\n            <button type=\"submit\" className=\"login-form-submit-button\">\n              Login\n            </button>\n          </form>\n        </div>\n        {showLoginErrorMessage ? this.renderLoginErrorMessage() : null}\n      </div>\n    );\n  };\n\n  render() {\n    return this.renderLoginForm();\n  }\n}\n\nexport default withRouter(Login);\n","import { Component } from \"react\";\nimport Loader from \"react-loader-spinner\";\n\nimport \"./index.css\";\n\nconst apiConstants = {\n  initial: \"INITIAL\",\n  failure: \"FAILURE\",\n  success: \"SUCCESS\",\n  inProgress: \"IN_PROGRESS\",\n};\n\nclass Register extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    registrationResponseMessage: \"\",\n    registrationApiStatus: apiConstants.initial,\n  };\n\n  onSubmitRegistrationForm = async (event) => {\n    this.setState({ registrationApiStatus: apiConstants.inProgress });\n    event.preventDefault();\n    const { username, password } = this.state;\n    const userDetails = {\n      username: username,\n      password: password,\n    };\n    const registrationUrl =\n      \"https://srikanthdisplaydata.herokuapp.com/register/\";\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify(userDetails),\n    };\n    const registerResponse = await fetch(registrationUrl, options);\n    const registerResponseJson = await registerResponse.json();\n    if (registerResponse.ok) {\n      this.setState({\n        registrationApiStatus: apiConstants.success,\n        registrationResponseMessage: registerResponseJson.message,\n      });\n    } else {\n      this.setState({\n        registrationApiStatus: apiConstants.failure,\n        registrationResponseMessage: registerResponseJson.message,\n      });\n    }\n  };\n\n  loginAfterRegistration = () => {\n    const { setStateToInitial } = this.props;\n    setStateToInitial();\n  };\n\n  onChangeUsername = (event) => {\n    this.setState({ username: event.target.value });\n  };\n\n  onChangePassword = (event) => {\n    this.setState({ password: event.target.value });\n  };\n\n  renderLoader = () => (\n    <div className=\"react-loader-spinner\">\n      <Loader type=\"TailSpin\" color=\"#00BFFF\" height={80} width={80} />\n    </div>\n  );\n\n  renderRegistrationSuccessContainer = () => {\n    const { registrationResponseMessage } = this.state;\n    return (\n      <div className=\"registration-success-container\">\n        <h1 className=\"registration-response-heading\">\n          {registrationResponseMessage}\n        </h1>\n        <button\n          type=\"button\"\n          className=\"login-button\"\n          onClick={this.loginAfterRegistration}\n        >\n          Login\n        </button>\n      </div>\n    );\n  };\n\n  renderRegistrationFailureContainer = () => {\n    const { registrationResponseMessage } = this.state;\n    return (\n      <div className=\"registration-failure-container\">\n        <h1 className=\"registration-response-heading\">\n          {registrationResponseMessage}\n        </h1>\n        <button\n          type=\"button\"\n          className=\"login-button\"\n          onClick={this.loginAfterRegistration}\n        >\n          Login\n        </button>\n      </div>\n    );\n  };\n\n  renderRegistrationResponse = () => {\n    const { registrationApiStatus } = this.state;\n    switch (registrationApiStatus) {\n      case apiConstants.failure:\n        return this.renderRegistrationFailureContainer();\n      case apiConstants.success:\n        return this.renderRegistrationSuccessContainer();\n      case apiConstants.inProgress:\n        return this.renderLoader();\n      default:\n        return null;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"registration-bg-container\">\n        <div className=\"registration-form-container\">\n          <h1 className=\"registration-form-heading\">Please Register Here</h1>\n          <form\n            className=\"registration-form\"\n            onSubmit={this.onSubmitRegistrationForm}\n          >\n            <label\n              className=\"registration-form-label\"\n              htmlFor=\"registrationFormUsername\"\n            >\n              Username\n            </label>\n            <input\n              type=\"text\"\n              className=\"registration-form-input\"\n              id=\"registrationFormUsername\"\n              onChange={this.onChangeUsername}\n            />\n            <label\n              className=\"registration-form-label\"\n              htmlFor=\"registrationFormPassword\"\n            >\n              Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"registration-form-input\"\n              id=\"registrationFormPassword\"\n              onChange={this.onChangePassword}\n            />\n            <button type=\"submit\" className=\"registration-form-submit-button\">\n              Register\n            </button>\n          </form>\n          {this.renderRegistrationResponse()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Register;\n","import { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Cookies from \"js-cookie\";\n\nimport Login from \"../Login\";\nimport Register from \"../Register\";\n\nimport \"./index.css\";\n\nconst userStatusConstants = {\n  initial: \"INITIAL\",\n  member: \"MEMBER\",\n  notMember: \"NOT_MEMBER\",\n};\n\nclass LoginRegister extends Component {\n  state = {\n    isMember: userStatusConstants.initial,\n  };\n  setStateToInitial = () => {\n    this.setState({ isMember: userStatusConstants.initial });\n  };\n\n  onClickDisplayLoginForm = () => {\n    this.setState({ isMember: userStatusConstants.member });\n  };\n\n  onClickDisplayRegisterForm = () => {\n    this.setState({ isMember: userStatusConstants.notMember });\n  };\n\n  renderLoginRegisterButtons = () => (\n    <div className=\"register-login-button-container\">\n      <h1 className=\"login-register-heading\">Welcome To FinancePeer</h1>\n      <hr className=\"hr-line-style\" />\n      <h2 className=\"register-heading\">\n        Not Our Member Till Now ? Please Register Here...\n      </h2>\n      <button\n        type=\"button\"\n        className=\"register-button\"\n        onClick={this.onClickDisplayRegisterForm}\n      >\n        Register\n      </button>\n      <hr className=\"hr-line-style\" />\n      <h2 className=\"login-heading\">\n        Already A Member Of Us ? Please Login Here...\n      </h2>\n      <button\n        type=\"button\"\n        className=\"login-button\"\n        onClick={this.onClickDisplayLoginForm}\n      >\n        Login\n      </button>\n    </div>\n  );\n\n  renderLoginRegisterPage = () => {\n    const { isMember } = this.state;\n    switch (isMember) {\n      case userStatusConstants.member:\n        return <Login />;\n      case userStatusConstants.notMember:\n        return <Register setStateToInitial={this.setStateToInitial} />;\n      default:\n        return this.renderLoginRegisterButtons();\n    }\n  };\n  render() {\n    const jwtToken = Cookies.get(\"jwt_token\");\n    if (jwtToken !== undefined) {\n      return <Redirect to=\"/\" />;\n    }\n    return this.renderLoginRegisterPage();\n  }\n}\n\nexport default LoginRegister;\n","import { Route, Redirect } from \"react-router-dom\";\nimport Cookies from \"js-cookie\";\n\nconst AuthenticatedRoute = (props) => {\n  const jwtToken = Cookies.get(\"jwt_token\");\n  if (jwtToken === undefined) {\n    return <Redirect to=\"/loginRegister\" />;\n  }\n  return <Route {...props} />;\n};\n\nexport default AuthenticatedRoute;\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport Home from \"./components/Home\";\nimport About from \"./components/AboutRoute\";\nimport NotFound from \"./components/NotFound\";\nimport LoginRegister from \"./components/LoginRegister\";\nimport AuthenticatedRoute from \"./components/AuthenticatedRoute\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/loginRegister\" component={LoginRegister} />\n        <AuthenticatedRoute exact path=\"/\" component={Home} />\n        <AuthenticatedRoute exact path=\"/about\" component={About} />\n        <Route exact path=\"/welcome-page\" component={NotFound} />\n        <Redirect to=\"/welcome-page\" />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}